// This file is automatically generated from CSSProperties.json by the process-css-properties script. Do not edit it.

#pragma once

#include <array>
#include <optional>
#include <tuple>
#include <variant>

namespace WebCore {

struct WritingModeProperty {
    struct HorizontalTb { };
    struct VerticalLr { };
    struct VerticalRl { };
    struct LrTb { };
    struct RlTb { };
    struct TbRl { };
    struct Lr { };
    struct Rl { };
    struct Tb { };
    struct HorizontalBt { };
    std::variant<HorizontalTb, VerticalLr, VerticalRl, LrTb, RlTb, TbRl, Lr, Rl, Tb, HorizontalBt> value;
};

struct WebkitRubyPositionProperty {
    struct Before { };
    struct After { };
    struct InterCharacter { };
    std::variant<Before, After, InterCharacter> value;
};

struct ColorProperty {
    Color value;
};

struct DirectionProperty {
    struct Ltr { };
    struct Rtl { };
    std::variant<Ltr, Rtl> value;
};

struct DisplayProperty {
    struct Inline { };
    struct Block { };
    struct Flow { };
    struct FlowRoot { };
    struct ListItem { };
    struct InlineBlock { };
    struct Table { };
    struct InlineTable { };
    struct TableRowGroup { };
    struct TableHeaderGroup { };
    struct TableFooterGroup { };
    struct TableRow { };
    struct TableColumnGroup { };
    struct TableColumn { };
    struct TableCell { };
    struct TableCaption { };
    struct Flex { };
    struct InlineFlex { };
    struct Grid { };
    struct InlineGrid { };
    struct Contents { };
    struct None { };
    struct WebkitBox { };
    struct WebkitInlineBox { };
    struct WebkitFlex { };
    struct WebkitInlineFlex { };
    std::variant<Inline, Block, Flow, FlowRoot, ListItem, InlineBlock, Table, InlineTable, TableRowGroup, TableHeaderGroup, TableFooterGroup, TableRow, TableColumnGroup, TableColumn, TableCell, TableCaption, Flex, InlineFlex, Grid, InlineGrid, Contents, None, WebkitBox, WebkitInlineBox, WebkitFlex, WebkitInlineFlex> value;
};

struct FontKerningProperty {
    struct Auto { };
    struct Normal { };
    struct None { };
    std::variant<Auto, Normal, None> value;
};

struct FontPaletteProperty {
    struct Normal { };
    struct Light { };
    struct Dark { };
    std::variant<Normal, Light, Dark, PaletteIdentifier> value;
};

struct FontSizeProperty {
    std::variant<AbsoluteSize, RelativeSize, LengthPercentage, WebkitAbsoluteSize, WebkitRelativeSize> value;
};

struct FontSizeAdjustProperty {
    struct None { };
    std::variant<None, Number> value;
};

struct FontStretchProperty {
    struct Normal { };
    struct UltraCondensed { };
    struct ExtraCondensed { };
    struct Condensed { };
    struct SemiCondensed { };
    struct SemiExpanded { };
    struct Expanded { };
    struct ExtraExpanded { };
    struct UltraExpanded { };
    std::variant<Normal, UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, SemiExpanded, Expanded, ExtraExpanded, UltraExpanded> value;
};

struct FontStyleProperty {
    struct Normal { };
    struct Italic { };
    struct Oblique { };
    std::variant<Normal, Italic, Oblique> value;
};

struct FontSynthesisSmallCapsProperty {
    struct Auto { };
    struct None { };
    std::variant<Auto, None> value;
};

struct FontSynthesisStyleProperty {
    struct Auto { };
    struct None { };
    std::variant<Auto, None> value;
};

struct FontSynthesisWeightProperty {
    struct Auto { };
    struct None { };
    std::variant<Auto, None> value;
};

struct FontVariantCapsProperty {
    struct Normal { };
    struct SmallCaps { };
    struct AllSmallCaps { };
    struct PetiteCaps { };
    struct AllPetiteCaps { };
    struct Unicase { };
    struct TitlingCaps { };
    std::variant<Normal, SmallCaps, AllSmallCaps, PetiteCaps, AllPetiteCaps, Unicase, TitlingCaps> value;
};

struct FontVariantPositionProperty {
    struct Normal { };
    struct Sub { };
    struct Super { };
    std::variant<Normal, Sub, Super> value;
};

struct TextOrientationProperty {
    struct Sideways { };
    struct Mixed { };
    struct Upright { };
    std::variant<Sideways, Mixed, Upright> value;
};

struct TextRenderingProperty {
    struct Auto { };
    struct OptimizeSpeed { };
    struct OptimizeLegibility { };
    struct GeometricPrecision { };
    std::variant<Auto, OptimizeSpeed, OptimizeLegibility, GeometricPrecision> value;
};

struct ZoomProperty {
    struct Normal { };
    struct Reset { };
    struct Document { };
    std::variant<Normal, Reset, Document, Percentage, Number> value;
};

struct WebkitFontSmoothingProperty {
    struct Auto { };
    struct None { };
    struct Antialiased { };
    struct SubpixelAntialiased { };
    std::variant<Auto, None, Antialiased, SubpixelAntialiased> value;
};

struct WebkitLocaleProperty {
    struct Auto { };
    std::variant<Auto, String> value;
};

struct WebkitTextZoomProperty {
    struct Normal { };
    struct Reset { };
    std::variant<Normal, Reset> value;
};

struct LetterSpacingProperty {
    struct Normal { };
    std::variant<Normal, Length> value;
};

struct AccentColorProperty {
    struct Auto { };
    std::variant<Auto, Color> value;
};

struct AlignContentProperty {
    struct FlexStart { };
    struct FlexEnd { };
    struct Center { };
    struct SpaceBetween { };
    struct SpaceAround { };
    struct Stretch { };
    std::variant<FlexStart, FlexEnd, Center, SpaceBetween, SpaceAround, Stretch> value;
};

struct AlignItemsProperty {
    struct FlexStart { };
    struct FlexEnd { };
    struct Center { };
    struct Baseline { };
    struct Stretch { };
    std::variant<FlexStart, FlexEnd, Center, Baseline, Stretch> value;
};

struct AlignSelfProperty {
    struct Auto { };
    struct FlexStart { };
    struct FlexEnd { };
    struct Center { };
    struct Baseline { };
    struct Stretch { };
    std::variant<Auto, FlexStart, FlexEnd, Center, Baseline, Stretch> value;
};

struct AlignmentBaselineProperty {
    struct Auto { };
    struct Baseline { };
    struct BeforeEdge { };
    struct TextBeforeEdge { };
    struct Middle { };
    struct Central { };
    struct AfterEdge { };
    struct TextAfterEdge { };
    struct Ideographic { };
    struct Alphabetic { };
    struct Hanging { };
    struct Mathematical { };
    std::variant<Auto, Baseline, BeforeEdge, TextBeforeEdge, Middle, Central, AfterEdge, TextAfterEdge, Ideographic, Alphabetic, Hanging, Mathematical> value;
};

struct AnimationCompositionProperty {
    Vector<SingleAnimationComposition> value;
};

struct AnimationDelayProperty {
    Vector<Time> value;
};

struct AnimationDirectionProperty {
    Vector<SingleAnimationDirection> value;
};

struct AnimationDurationProperty {
    Vector<Time> value;
};

struct AnimationFillModeProperty {
    Vector<SingleAnimationFillMode> value;
};

struct AnimationIterationCountProperty {
    Vector<SingleAnimationIterationCount> value;
};

struct AnimationNameProperty {
    Vector<SingleAnimationName> value;
};

struct AnimationPlayStateProperty {
    Vector<SingleAnimationPlayState> value;
};

struct AnimationTimingFunctionProperty {
    Vector<TimingFunction> value;
};

struct AppearanceProperty {
    struct Checkbox { };
    struct Radio { };
    struct PushButton { };
    struct SquareButton { };
    struct Button { };
    struct Listbox { };
    struct Menulist { };
    struct MenulistButton { };
    struct Meter { };
    struct ProgressBar { };
    struct SliderHorizontal { };
    struct SliderVertical { };
    struct Searchfield { };
    struct Textfield { };
    struct Textarea { };
    struct Auto { };
    struct None { };
    struct DefaultButton { };
    std::variant<Checkbox, Radio, PushButton, SquareButton, Button, Listbox, Menulist, MenulistButton, Meter, ProgressBar, SliderHorizontal, SliderVertical, Searchfield, Textfield, Textarea, Auto, None, DefaultButton> value;
};

struct BackfaceVisibilityProperty {
    struct Visible { };
    struct Hidden { };
    std::variant<Visible, Hidden> value;
};

struct BackgroundAttachmentProperty {
    Vector<SingleBackgroundAttachment> value;
};

struct BackgroundBlendModeProperty {
    Vector<SingleBackgroundBlendMode> value;
};

struct BackgroundColorProperty {
    Color value;
};

struct BackgroundImageProperty {
    Vector<SingleBackgroundImage> value;
};

struct BaselineShiftProperty {
    struct Baseline { };
    struct Sub { };
    struct Super { };
    std::variant<Baseline, Sub, Super, LengthPercentage> value;
};

struct BorderCollapseProperty {
    struct Collapse { };
    struct Separate { };
    std::variant<Collapse, Separate> value;
};

struct BorderImageSourceProperty {
    struct None { };
    std::variant<None, Image> value;
};

struct BoxSizingProperty {
    struct BorderBox { };
    struct ContentBox { };
    std::variant<BorderBox, ContentBox> value;
};

struct BreakAfterProperty {
    struct Auto { };
    struct Avoid { };
    struct AvoidPage { };
    struct Page { };
    struct Left { };
    struct Right { };
    struct Recto { };
    struct Verso { };
    struct AvoidColumn { };
    struct Column { };
    std::variant<Auto, Avoid, AvoidPage, Page, Left, Right, Recto, Verso, AvoidColumn, Column> value;
};

struct BreakBeforeProperty {
    struct Auto { };
    struct Avoid { };
    struct AvoidPage { };
    struct Page { };
    struct Left { };
    struct Right { };
    struct Recto { };
    struct Verso { };
    struct AvoidColumn { };
    struct Column { };
    std::variant<Auto, Avoid, AvoidPage, Page, Left, Right, Recto, Verso, AvoidColumn, Column> value;
};

struct BreakInsideProperty {
    struct Auto { };
    struct Avoid { };
    struct AvoidPage { };
    struct AvoidColumn { };
    std::variant<Auto, Avoid, AvoidPage, AvoidColumn> value;
};

struct BufferedRenderingProperty {
    struct Auto { };
    struct Dynamic { };
    struct Static { };
    std::variant<Auto, Dynamic, Static> value;
};

struct CaptionSideProperty {
    struct Left { };
    struct Right { };
    struct Top { };
    struct Bottom { };
    std::variant<Left, Right, Top, Bottom> value;
};

struct CaretColorProperty {
    struct Auto { };
    std::variant<Auto, Color> value;
};

struct ClearProperty {
    struct None { };
    struct Left { };
    struct Right { };
    struct Both { };
    struct InlineStart { };
    struct InlineEnd { };
    std::variant<None, Left, Right, Both, InlineStart, InlineEnd> value;
};

struct ClipRuleProperty {
    struct Nonzero { };
    struct Evenodd { };
    std::variant<Nonzero, Evenodd> value;
};

struct ColorInterpolationProperty {
    struct Auto { };
    struct SRGB { };
    struct LinearRGB { };
    std::variant<Auto, SRGB, LinearRGB> value;
};

struct ColorInterpolationFiltersProperty {
    struct Auto { };
    struct SRGB { };
    struct LinearRGB { };
    std::variant<Auto, SRGB, LinearRGB> value;
};

struct ColumnCountProperty {
    struct Auto { };
    std::variant<Auto, Integer> value;
};

struct ColumnFillProperty {
    struct Auto { };
    struct Balance { };
    std::variant<Auto, Balance> value;
};

struct ColumnGapProperty {
    std::variant<GapGutter> value;
};

struct ColumnRuleColorProperty {
    Color value;
};

struct ColumnRuleStyleProperty {
    struct None { };
    struct Hidden { };
    struct Inset { };
    struct Groove { };
    struct Outset { };
    struct Ridge { };
    struct Dotted { };
    struct Dashed { };
    struct Solid { };
    struct Double { };
    std::variant<None, Hidden, Inset, Groove, Outset, Ridge, Dotted, Dashed, Solid, Double> value;
};

struct ColumnRuleWidthProperty {
    std::variant<LineWidth> value;
};

struct ColumnSpanProperty {
    struct None { };
    struct All { };
    std::variant<None, All> value;
};

struct ColumnWidthProperty {
    struct Auto { };
    std::variant<Auto, Length> value;
};

struct ContainerTypeProperty {
    struct Normal { };
    struct Size { };
    struct InlineSize { };
    std::variant<Normal, Size, InlineSize> value;
};

struct ContentVisibilityProperty {
    struct Visible { };
    struct Hidden { };
    struct Auto { };
    std::variant<Visible, Hidden, Auto> value;
};

struct CounterIncrementProperty {
    struct None { };
    using Edges = std::tuple<LengthPercentage, std::optional<Integer>>;
    using Box = Vector<Edges>;
    std::variant<None, Box> value;
};

struct CursorProperty {
    struct Auto { };
    struct Default { };
    struct None { };
    struct ContextMenu { };
    struct Help { };
    struct Pointer { };
    struct Progress { };
    struct Wait { };
    struct Cell { };
    struct Crosshair { };
    struct Text { };
    struct VerticalText { };
    struct Alias { };
    struct Copy { };
    struct Move { };
    struct NoDrop { };
    struct NotAllowed { };
    struct Grab { };
    struct Grabbing { };
    struct EResize { };
    struct NResize { };
    struct NeResize { };
    struct NwResize { };
    struct SResize { };
    struct SeResize { };
    struct SwResize { };
    struct WResize { };
    struct EwResize { };
    struct NsResize { };
    struct NeswResize { };
    struct NwseResize { };
    struct ColResize { };
    struct RowResize { };
    struct AllScroll { };
    struct ZoomIn { };
    struct ZoomOut { };
    struct WebkitGrab { };
    struct WebkitGrabbing { };
    struct WebkitZoomIn { };
    struct WebkitZoomOut { };
    std::variant<Auto, Default, None, ContextMenu, Help, Pointer, Progress, Wait, Cell, Crosshair, Text, VerticalText, Alias, Copy, Move, NoDrop, NotAllowed, Grab, Grabbing, EResize, NResize, NeResize, NwResize, SResize, SeResize, SwResize, WResize, EwResize, NsResize, NeswResize, NwseResize, ColResize, RowResize, AllScroll, ZoomIn, ZoomOut, WebkitGrab, WebkitGrabbing, WebkitZoomIn, WebkitZoomOut> value;
};

struct CxProperty {
    LengthPercentage value;
};

struct CyProperty {
    LengthPercentage value;
};

struct DominantBaselineProperty {
    struct Auto { };
    struct UseScript { };
    struct NoChange { };
    struct ResetSize { };
    struct Ideographic { };
    struct Alphabetic { };
    struct Hanging { };
    struct Mathematical { };
    struct Central { };
    struct Middle { };
    struct TextBeforeEdge { };
    struct TextAfterEdge { };
    std::variant<Auto, UseScript, NoChange, ResetSize, Ideographic, Alphabetic, Hanging, Mathematical, Central, Middle, TextBeforeEdge, TextAfterEdge> value;
};

struct EmptyCellsProperty {
    struct Show { };
    struct Hide { };
    std::variant<Show, Hide> value;
};

struct FillOpacityProperty {
    std::variant<Number, Percentage> value;
};

struct FillRuleProperty {
    struct Nonzero { };
    struct Evenodd { };
    std::variant<Nonzero, Evenodd> value;
};

struct FlexBasisProperty {
    struct Auto { };
    struct Content { };
    std::variant<Auto, Content, WidthOrHeightKeyword, LengthPercentage> value;
};

struct FlexDirectionProperty {
    struct Row { };
    struct RowReverse { };
    struct Column { };
    struct ColumnReverse { };
    std::variant<Row, RowReverse, Column, ColumnReverse> value;
};

struct FlexGrowProperty {
    Number value;
};

struct FlexShrinkProperty {
    Number value;
};

struct FlexWrapProperty {
    struct Nowrap { };
    struct Wrap { };
    struct WrapReverse { };
    std::variant<Nowrap, Wrap, WrapReverse> value;
};

struct FloatProperty {
    struct Left { };
    struct Right { };
    struct None { };
    struct InlineStart { };
    struct InlineEnd { };
    std::variant<Left, Right, None, InlineStart, InlineEnd> value;
};

struct FloodColorProperty {
    Color value;
};

struct FloodOpacityProperty {
    std::variant<Number, Percentage> value;
};

struct FontDisplayProperty {
    struct Auto { };
    struct Block { };
    struct Swap { };
    struct Fallback { };
    struct Optional { };
    std::variant<Auto, Block, Swap, Fallback, Optional> value;
};

struct GlyphOrientationHorizontalProperty {
    Angle value;
};

struct GlyphOrientationVerticalProperty {
    struct Auto { };
    std::variant<Auto, Angle> value;
};

struct ImageOrientationProperty {
    struct FromImage { };
    struct None { };
    std::variant<FromImage, None> value;
};

struct ImageRenderingProperty {
    struct Auto { };
    struct Pixelated { };
    struct CrispEdges { };
    struct OptimizeSpeed { };
    struct OptimizeQuality { };
    struct WebkitCrispEdges { };
    struct WebkitOptimizeContrast { };
    std::variant<Auto, Pixelated, CrispEdges, OptimizeSpeed, OptimizeQuality, WebkitCrispEdges, WebkitOptimizeContrast> value;
};

struct InputSecurityProperty {
    struct Auto { };
    struct None { };
    std::variant<Auto, None> value;
};

struct JustifyContentProperty {
    struct FlexStart { };
    struct FlexEnd { };
    struct Center { };
    struct SpaceBetween { };
    struct SpaceAround { };
    std::variant<FlexStart, FlexEnd, Center, SpaceBetween, SpaceAround> value;
};

struct KerningProperty {
    struct Auto { };
    struct Normal { };
    std::variant<Auto, Normal, Length> value;
};

struct LeadingTrimProperty {
    struct Normal { };
    struct Start { };
    struct End { };
    struct Both { };
    std::variant<Normal, Start, End, Both> value;
};

struct LightingColorProperty {
    Color value;
};

struct LineBreakProperty {
    struct Auto { };
    struct Loose { };
    struct Normal { };
    struct Strict { };
    struct AfterWhiteSpace { };
    struct Anywhere { };
    std::variant<Auto, Loose, Normal, Strict, AfterWhiteSpace, Anywhere> value;
};

struct LineHeightProperty {
    struct Normal { };
    std::variant<Normal, Number, LengthPercentage> value;
};

struct ListStyleImageProperty {
    struct None { };
    std::variant<None, Image> value;
};

struct ListStylePositionProperty {
    struct Inside { };
    struct Outside { };
    std::variant<Inside, Outside> value;
};

struct ListStyleTypeProperty {
    std::variant<<values>, String> value;
};

struct MarkerEndProperty {
    struct None { };
    std::variant<None, MarkerRef> value;
};

struct MarkerMidProperty {
    struct None { };
    std::variant<None, MarkerRef> value;
};

struct MarkerStartProperty {
    struct None { };
    std::variant<None, MarkerRef> value;
};

struct MaskImageProperty {
    Vector<SingleMaskImage> value;
};

struct MaskOriginProperty {
    Vector<SingleMaskOrigin> value;
};

struct MaskTypeProperty {
    struct Luminance { };
    struct Alpha { };
    std::variant<Luminance, Alpha> value;
};

struct MathStyleProperty {
    struct Normal { };
    struct Compact { };
    std::variant<Normal, Compact> value;
};

struct ObjectFitProperty {
    struct Fill { };
    struct Contain { };
    struct Cover { };
    struct None { };
    struct ScaleDown { };
    std::variant<Fill, Contain, Cover, None, ScaleDown> value;
};

struct ObjectPositionProperty {
    Position value;
};

struct OffsetAnchorProperty {
    struct Auto { };
    std::variant<Auto, Position> value;
};

struct OffsetDistanceProperty {
    LengthPercentage value;
};

struct OffsetPositionProperty {
    struct Auto { };
    std::variant<Auto, Position> value;
};

struct OpacityProperty {
    std::variant<AlphaValue> value;
};

struct OrderProperty {
    Integer value;
};

struct OrphansProperty {
    Integer value;
};

struct OutlineColorProperty {
    struct WebkitFocusRingColor { };
    std::variant<WebkitFocusRingColor, Color> value;
};

struct OutlineOffsetProperty {
    Length value;
};

struct OutlineStyleProperty {
    struct Auto { };
    struct None { };
    struct Inset { };
    struct Groove { };
    struct Outset { };
    struct Ridge { };
    struct Dotted { };
    struct Dashed { };
    struct Solid { };
    struct Double { };
    std::variant<Auto, None, Inset, Groove, Outset, Ridge, Dotted, Dashed, Solid, Double> value;
};

struct OutlineWidthProperty {
    std::variant<LineWidth> value;
};

struct OverflowAnchorProperty {
    struct None { };
    struct Auto { };
    std::variant<None, Auto> value;
};

struct OverflowWrapProperty {
    struct Normal { };
    struct BreakWord { };
    struct Anywhere { };
    std::variant<Normal, BreakWord, Anywhere> value;
};

struct OverflowXProperty {
    struct Visible { };
    struct Hidden { };
    struct Clip { };
    struct Scroll { };
    struct Auto { };
    struct Overlay { };
    std::variant<Visible, Hidden, Clip, Scroll, Auto, Overlay> value;
};

struct OverflowYProperty {
    struct Visible { };
    struct Hidden { };
    struct Clip { };
    struct Scroll { };
    struct Auto { };
    struct Overlay { };
    struct WebkitPagedX { };
    struct WebkitPagedY { };
    std::variant<Visible, Hidden, Clip, Scroll, Auto, Overlay, WebkitPagedX, WebkitPagedY> value;
};

struct PageProperty {
    struct Auto { };
    std::variant<Auto, CustomIdent> value;
};

struct PointerEventsProperty {
    struct VisiblePainted { };
    struct VisibleFill { };
    struct VisibleStroke { };
    struct Visible { };
    struct Painted { };
    struct Fill { };
    struct Stroke { };
    struct All { };
    struct None { };
    struct Auto { };
    struct BoundingBox { };
    std::variant<VisiblePainted, VisibleFill, VisibleStroke, Visible, Painted, Fill, Stroke, All, None, Auto, BoundingBox> value;
};

struct PositionProperty {
    struct Static { };
    struct Relative { };
    struct Absolute { };
    struct Fixed { };
    struct Sticky { };
    struct WebkitSticky { };
    std::variant<Static, Relative, Absolute, Fixed, Sticky, WebkitSticky> value;
};

struct PrintColorAdjustProperty {
    struct Exact { };
    struct Economy { };
    std::variant<Exact, Economy> value;
};

struct RProperty {
    LengthPercentage value;
};

struct ResizeProperty {
    struct None { };
    struct Both { };
    struct Horizontal { };
    struct Vertical { };
    struct Block { };
    struct Inline { };
    struct Auto { };
    std::variant<None, Both, Horizontal, Vertical, Block, Inline, Auto> value;
};

struct RowGapProperty {
    std::variant<GapGutter> value;
};

struct RxProperty {
    struct Auto { };
    std::variant<Auto, LengthPercentage> value;
};

struct RyProperty {
    struct Auto { };
    std::variant<Auto, LengthPercentage> value;
};

struct ScrollBehaviorProperty {
    struct Auto { };
    struct Smooth { };
    std::variant<Auto, Smooth> value;
};

struct ScrollSnapStopProperty {
    struct Always { };
    struct Normal { };
    std::variant<Always, Normal> value;
};

struct ShapeImageThresholdProperty {
    Number value;
};

struct ShapeMarginProperty {
    LengthPercentage value;
};

struct ShapeRenderingProperty {
    struct Auto { };
    struct OptimizeSpeed { };
    struct Crispedges { };
    struct GeometricPrecision { };
    std::variant<Auto, OptimizeSpeed, Crispedges, GeometricPrecision> value;
};

struct StopColorProperty {
    Color value;
};

struct StopOpacityProperty {
    std::variant<AlphaValue> value;
};

struct StrokeColorProperty {
    Color value;
};

struct StrokeDashoffsetProperty {
    LengthPercentage value;
};

struct StrokeLinecapProperty {
    struct Butt { };
    struct Round { };
    struct Square { };
    std::variant<Butt, Round, Square> value;
};

struct StrokeLinejoinProperty {
    struct Miter { };
    struct Round { };
    struct Bevel { };
    std::variant<Miter, Round, Bevel> value;
};

struct StrokeMiterlimitProperty {
    Number value;
};

struct StrokeOpacityProperty {
    std::variant<AlphaValue> value;
};

struct StrokeWidthProperty {
    LengthPercentage value;
};

struct TabSizeProperty {
    std::variant<Number, Length> value;
};

struct TableLayoutProperty {
    struct Auto { };
    struct Fixed { };
    std::variant<Auto, Fixed> value;
};

struct TextAlignProperty {
    struct WebkitAuto { };
    struct Left { };
    struct Right { };
    struct Center { };
    struct Justify { };
    struct MatchParent { };
    struct WebkitLeft { };
    struct WebkitRight { };
    struct WebkitCenter { };
    struct WebkitMatchParent { };
    struct InternalThCenter { };
    struct Start { };
    struct End { };
    std::variant<WebkitAuto, Left, Right, Center, Justify, MatchParent, WebkitLeft, WebkitRight, WebkitCenter, WebkitMatchParent, InternalThCenter, Start, End> value;
};

struct TextAlignLastProperty {
    struct Auto { };
    struct Start { };
    struct End { };
    struct Left { };
    struct Right { };
    struct Center { };
    struct Justify { };
    struct MatchParent { };
    std::variant<Auto, Start, End, Left, Right, Center, Justify, MatchParent> value;
};

struct TextAnchorProperty {
    struct Start { };
    struct Middle { };
    struct End { };
    std::variant<Start, Middle, End> value;
};

struct TextDecorationColorProperty {
    Color value;
};

struct TextDecorationLineProperty {
    struct None { };
    struct Underline { };
    struct Overline { };
    struct LineThrough { };
    struct Blink { };
    std::variant<None, Underline, Overline, LineThrough, Blink> value;
};

struct TextDecorationSkipInkProperty {
    struct Auto { };
    struct None { };
    struct All { };
    std::variant<Auto, None, All> value;
};

struct TextDecorationStyleProperty {
    struct Solid { };
    struct Double { };
    struct Dotted { };
    struct Dashed { };
    struct Wavy { };
    std::variant<Solid, Double, Dotted, Dashed, Wavy> value;
};

struct TextDecorationThicknessProperty {
    struct Auto { };
    struct FromFont { };
    std::variant<Auto, FromFont, Length> value;
};

struct TextEmphasisColorProperty {
    Color value;
};

struct TextJustifyProperty {
    struct Auto { };
    struct None { };
    struct InterWord { };
    struct InterCharacter { };
    struct Distribute { };
    std::variant<Auto, None, InterWord, InterCharacter, Distribute> value;
};

struct TextOverflowProperty {
    struct Clip { };
    struct Ellipsis { };
    std::variant<Clip, Ellipsis> value;
};

struct TextTransformProperty {
    struct Capitalize { };
    struct Uppercase { };
    struct Lowercase { };
    struct None { };
    std::variant<Capitalize, Uppercase, Lowercase, None> value;
};

struct TextUnderlineOffsetProperty {
    struct Auto { };
    std::variant<Auto, Length> value;
};

struct TextUnderlinePositionProperty {
    struct Auto { };
    struct Under { };
    struct FromFont { };
    std::variant<Auto, Under, FromFont> value;
};

struct TouchActionProperty {
    struct Auto { };
    struct None { };
    struct Manipulation { };
    struct PanX { };
    struct PanY { };
    struct PinchZoom { };
    std::variant<Auto, None, Manipulation, PanX, PanY, PinchZoom> value;
};

struct TransformBoxProperty {
    struct ContentBox { };
    struct BorderBox { };
    struct FillBox { };
    struct StrokeBox { };
    struct ViewBox { };
    std::variant<ContentBox, BorderBox, FillBox, StrokeBox, ViewBox> value;
};

struct TransformOriginZProperty {
    Length value;
};

struct TransformStyleProperty {
    struct Flat { };
    struct Preserve3d { };
    std::variant<Flat, Preserve3d> value;
};

struct TransitionDelayProperty {
    Vector<Time> value;
};

struct TransitionDurationProperty {
    Vector<Time> value;
};

struct TransitionPropertyProperty {
    struct None { };
    std::variant<None, Vector<SingleTransitionProperty>> value;
};

struct TransitionTimingFunctionProperty {
    Vector<TimingFunction> value;
};

struct UnicodeBidiProperty {
    struct Normal { };
    struct Embed { };
    struct BidiOverride { };
    struct Isolate { };
    struct IsolateOverride { };
    struct Plaintext { };
    struct WebkitIsolate { };
    struct WebkitIsolateOverride { };
    struct WebkitPlaintext { };
    std::variant<Normal, Embed, BidiOverride, Isolate, IsolateOverride, Plaintext, WebkitIsolate, WebkitIsolateOverride, WebkitPlaintext> value;
};

struct VectorEffectProperty {
    struct None { };
    struct NonScalingStroke { };
    std::variant<None, NonScalingStroke> value;
};

struct VerticalAlignProperty {
    struct Baseline { };
    struct Sub { };
    struct Super { };
    struct Top { };
    struct TextTop { };
    struct Middle { };
    struct Bottom { };
    struct TextBottom { };
    struct WebkitBaselineMiddle { };
    std::variant<Baseline, Sub, Super, Top, TextTop, Middle, Bottom, TextBottom, WebkitBaselineMiddle, LengthPercentage> value;
};

struct VisibilityProperty {
    struct Visible { };
    struct Hidden { };
    struct Collapse { };
    std::variant<Visible, Hidden, Collapse> value;
};

struct WhiteSpaceProperty {
    struct Normal { };
    struct Pre { };
    struct PreWrap { };
    struct PreLine { };
    struct Nowrap { };
    struct BreakSpaces { };
    std::variant<Normal, Pre, PreWrap, PreLine, Nowrap, BreakSpaces> value;
};

struct WidowsProperty {
    Integer value;
};

struct WordBreakProperty {
    struct Normal { };
    struct BreakAll { };
    struct KeepAll { };
    struct BreakWord { };
    std::variant<Normal, BreakAll, KeepAll, BreakWord> value;
};

struct WordSpacingProperty {
    struct Normal { };
    std::variant<Normal, LengthPercentage> value;
};

struct XProperty {
    LengthPercentage value;
};

struct YProperty {
    LengthPercentage value;
};

struct ZIndexProperty {
    struct Auto { };
    std::variant<Auto, Integer> value;
};

struct WebkitBorderHorizontalSpacingProperty {
    Length value;
};

struct WebkitBorderVerticalSpacingProperty {
    Length value;
};

struct WebkitBoxAlignProperty {
    struct Stretch { };
    struct Start { };
    struct End { };
    struct Center { };
    struct Baseline { };
    std::variant<Stretch, Start, End, Center, Baseline> value;
};

struct WebkitBoxDirectionProperty {
    struct Normal { };
    struct Reverse { };
    std::variant<Normal, Reverse> value;
};

struct WebkitBoxFlexProperty {
    Number value;
};

struct WebkitBoxFlexGroupProperty {
    Integer value;
};

struct WebkitBoxLinesProperty {
    struct Single { };
    struct Multiple { };
    std::variant<Single, Multiple> value;
};

struct WebkitBoxOrdinalGroupProperty {
    Integer value;
};

struct WebkitBoxOrientProperty {
    struct Horizontal { };
    struct Vertical { };
    struct InlineAxis { };
    struct BlockAxis { };
    std::variant<Horizontal, Vertical, InlineAxis, BlockAxis> value;
};

struct WebkitBoxPackProperty {
    struct Start { };
    struct End { };
    struct Center { };
    struct Justify { };
    std::variant<Start, End, Center, Justify> value;
};

struct WebkitColumnAxisProperty {
    struct Horizontal { };
    struct Vertical { };
    struct Auto { };
    std::variant<Horizontal, Vertical, Auto> value;
};

struct WebkitColumnProgressionProperty {
    struct Normal { };
    struct Reverse { };
    std::variant<Normal, Reverse> value;
};

struct WebkitFontSizeDeltaProperty {
    Length value;
};

struct WebkitHyphenateCharacterProperty {
    struct Auto { };
    std::variant<Auto, String> value;
};

struct WebkitHyphenateLimitAfterProperty {
    struct Auto { };
    std::variant<Auto, Number> value;
};

struct WebkitHyphenateLimitBeforeProperty {
    struct Auto { };
    std::variant<Auto, Number> value;
};

struct WebkitHyphenateLimitLinesProperty {
    struct NoLimit { };
    std::variant<NoLimit, Number> value;
};

struct WebkitHyphensProperty {
    struct None { };
    struct Manual { };
    struct Auto { };
    std::variant<None, Manual, Auto> value;
};

struct WebkitLineAlignProperty {
    struct None { };
    struct Edges { };
    std::variant<None, Edges> value;
};

struct WebkitLineBoxContainProperty {
    struct Block { };
    struct Inline { };
    struct Font { };
    struct Glyphs { };
    struct Replaced { };
    struct InlineBox { };
    struct InitialLetter { };
    std::variant<Block, Inline, Font, Glyphs, Replaced, InlineBox, InitialLetter> value;
};

struct WebkitLineClampProperty {
    std::variant<Percentage, Integer> value;
};

struct WebkitLineGridProperty {
    struct None { };
    std::variant<None, CustomIdent> value;
};

struct WebkitLineSnapProperty {
    struct None { };
    struct Baseline { };
    struct Contain { };
    std::variant<None, Baseline, Contain> value;
};

struct WebkitMarqueeDirectionProperty {
    struct Forwards { };
    struct Backwards { };
    struct Ahead { };
    struct Reverse { };
    struct Left { };
    struct Right { };
    struct Down { };
    struct Up { };
    struct Auto { };
    std::variant<Forwards, Backwards, Ahead, Reverse, Left, Right, Down, Up, Auto> value;
};

struct WebkitMarqueeIncrementProperty {
    LengthPercentage value;
};

struct WebkitMarqueeRepetitionProperty {
    Number value;
};

struct WebkitMarqueeSpeedProperty {
    Time value;
};

struct WebkitMarqueeStyleProperty {
    struct None { };
    struct Slide { };
    struct Scroll { };
    struct Alternate { };
    std::variant<None, Slide, Scroll, Alternate> value;
};

struct WebkitMaskBoxImageSourceProperty {
    struct None { };
    std::variant<None, Image> value;
};

struct WebkitNbspModeProperty {
    struct Normal { };
    struct Space { };
    std::variant<Normal, Space> value;
};

struct WebkitRtlOrderingProperty {
    struct Logical { };
    struct Visual { };
    std::variant<Logical, Visual> value;
};

struct WebkitTextFillColorProperty {
    Color value;
};

struct WebkitTextSecurityProperty {
    struct Disc { };
    struct Circle { };
    struct Square { };
    struct None { };
    std::variant<Disc, Circle, Square, None> value;
};

struct WebkitTextStrokeColorProperty {
    Color value;
};

struct WebkitTextStrokeWidthProperty {
    std::variant<LineWidth> value;
};

struct WebkitUserDragProperty {
    struct Auto { };
    struct None { };
    struct Element { };
    std::variant<Auto, None, Element> value;
};

struct WebkitUserModifyProperty {
    struct ReadOnly { };
    struct ReadWrite { };
    struct ReadWritePlaintextOnly { };
    std::variant<ReadOnly, ReadWrite, ReadWritePlaintextOnly> value;
};

struct WebkitUserSelectProperty {
    struct Auto { };
    struct Text { };
    struct None { };
    struct All { };
    std::variant<Auto, Text, None, All> value;
};

struct BackgroundClipProperty {
    Vector<SingleBackgroundClip> value;
};

struct BackgroundOriginProperty {
    Vector<SingleBackgroundOrigin> value;
};

struct BlockSizeProperty {
    std::variant<WidthOrHeight> value;
};

struct BorderBlockEndColorProperty {
    Color value;
};

struct BorderBlockEndStyleProperty {
    struct None { };
    struct Hidden { };
    struct Inset { };
    struct Groove { };
    struct Outset { };
    struct Ridge { };
    struct Dotted { };
    struct Dashed { };
    struct Solid { };
    struct Double { };
    std::variant<None, Hidden, Inset, Groove, Outset, Ridge, Dotted, Dashed, Solid, Double> value;
};

struct BorderBlockEndWidthProperty {
    std::variant<LineWidth> value;
};

struct BorderBlockStartColorProperty {
    Color value;
};

struct BorderBlockStartStyleProperty {
    struct None { };
    struct Hidden { };
    struct Inset { };
    struct Groove { };
    struct Outset { };
    struct Ridge { };
    struct Dotted { };
    struct Dashed { };
    struct Solid { };
    struct Double { };
    std::variant<None, Hidden, Inset, Groove, Outset, Ridge, Dotted, Dashed, Solid, Double> value;
};

struct BorderBlockStartWidthProperty {
    std::variant<LineWidth> value;
};

struct BorderBottomStyleProperty {
    struct None { };
    struct Hidden { };
    struct Inset { };
    struct Groove { };
    struct Outset { };
    struct Ridge { };
    struct Dotted { };
    struct Dashed { };
    struct Solid { };
    struct Double { };
    std::variant<None, Hidden, Inset, Groove, Outset, Ridge, Dotted, Dashed, Solid, Double> value;
};

struct BorderInlineEndColorProperty {
    Color value;
};

struct BorderInlineEndStyleProperty {
    struct None { };
    struct Hidden { };
    struct Inset { };
    struct Groove { };
    struct Outset { };
    struct Ridge { };
    struct Dotted { };
    struct Dashed { };
    struct Solid { };
    struct Double { };
    std::variant<None, Hidden, Inset, Groove, Outset, Ridge, Dotted, Dashed, Solid, Double> value;
};

struct BorderInlineEndWidthProperty {
    std::variant<LineWidth> value;
};

struct BorderInlineStartColorProperty {
    Color value;
};

struct BorderInlineStartStyleProperty {
    struct None { };
    struct Hidden { };
    struct Inset { };
    struct Groove { };
    struct Outset { };
    struct Ridge { };
    struct Dotted { };
    struct Dashed { };
    struct Solid { };
    struct Double { };
    std::variant<None, Hidden, Inset, Groove, Outset, Ridge, Dotted, Dashed, Solid, Double> value;
};

struct BorderInlineStartWidthProperty {
    std::variant<LineWidth> value;
};

struct BorderLeftStyleProperty {
    struct None { };
    struct Hidden { };
    struct Inset { };
    struct Groove { };
    struct Outset { };
    struct Ridge { };
    struct Dotted { };
    struct Dashed { };
    struct Solid { };
    struct Double { };
    std::variant<None, Hidden, Inset, Groove, Outset, Ridge, Dotted, Dashed, Solid, Double> value;
};

struct BorderRightStyleProperty {
    struct None { };
    struct Hidden { };
    struct Inset { };
    struct Groove { };
    struct Outset { };
    struct Ridge { };
    struct Dotted { };
    struct Dashed { };
    struct Solid { };
    struct Double { };
    std::variant<None, Hidden, Inset, Groove, Outset, Ridge, Dotted, Dashed, Solid, Double> value;
};

struct BorderTopStyleProperty {
    struct None { };
    struct Hidden { };
    struct Inset { };
    struct Groove { };
    struct Outset { };
    struct Ridge { };
    struct Dotted { };
    struct Dashed { };
    struct Solid { };
    struct Double { };
    std::variant<None, Hidden, Inset, Groove, Outset, Ridge, Dotted, Dashed, Solid, Double> value;
};

struct HeightProperty {
    std::variant<WidthOrHeightUnitlessAllowed> value;
};

struct InlineSizeProperty {
    std::variant<WidthOrHeight> value;
};

struct InsetBlockEndProperty {
    std::variant<InsetLogicalStartEnd> value;
};

struct InsetBlockStartProperty {
    std::variant<InsetLogicalStartEnd> value;
};

struct InsetInlineEndProperty {
    std::variant<InsetLogicalStartEnd> value;
};

struct InsetInlineStartProperty {
    std::variant<InsetLogicalStartEnd> value;
};

struct MarginBlockEndProperty {
    std::variant<MarginLogicalStartEnd> value;
};

struct MarginBlockStartProperty {
    std::variant<MarginLogicalStartEnd> value;
};

struct MarginInlineEndProperty {
    std::variant<MarginLogicalStartEnd> value;
};

struct MarginInlineStartProperty {
    std::variant<MarginLogicalStartEnd> value;
};

struct MaskClipProperty {
    Vector<SingleMaskClip> value;
};

struct MaskCompositeProperty {
    Vector<SingleMaskComposite> value;
};

struct MaskModeProperty {
    Vector<SingleMaskMode> value;
};

struct MaxBlockSizeProperty {
    std::variant<MaxWidthOrHeight> value;
};

struct MaxHeightProperty {
    std::variant<MaxWidthOrHeightUnitlessAllowed> value;
};

struct MaxInlineSizeProperty {
    std::variant<MaxWidthOrHeight> value;
};

struct MaxWidthProperty {
    std::variant<MaxWidthOrHeightUnitlessAllowed> value;
};

struct MinBlockSizeProperty {
    std::variant<WidthOrHeight> value;
};

struct MinHeightProperty {
    std::variant<WidthOrHeightUnitlessAllowed> value;
};

struct MinInlineSizeProperty {
    std::variant<WidthOrHeight> value;
};

struct MinWidthProperty {
    std::variant<WidthOrHeightUnitlessAllowed> value;
};

struct OverscrollBehaviorBlockProperty {
    struct Contain { };
    struct None { };
    struct Auto { };
    std::variant<Contain, None, Auto> value;
};

struct OverscrollBehaviorInlineProperty {
    struct Contain { };
    struct None { };
    struct Auto { };
    std::variant<Contain, None, Auto> value;
};

struct OverscrollBehaviorXProperty {
    struct Contain { };
    struct None { };
    struct Auto { };
    std::variant<Contain, None, Auto> value;
};

struct OverscrollBehaviorYProperty {
    struct Contain { };
    struct None { };
    struct Auto { };
    std::variant<Contain, None, Auto> value;
};

struct PaddingBlockEndProperty {
    LengthPercentage value;
};

struct PaddingBlockStartProperty {
    LengthPercentage value;
};

struct PaddingBottomProperty {
    LengthPercentage value;
};

struct PaddingInlineEndProperty {
    LengthPercentage value;
};

struct PaddingInlineStartProperty {
    LengthPercentage value;
};

struct PaddingLeftProperty {
    LengthPercentage value;
};

struct PaddingRightProperty {
    LengthPercentage value;
};

struct PaddingTopProperty {
    LengthPercentage value;
};

struct ScrollMarginBlockEndProperty {
    Length value;
};

struct ScrollMarginBlockStartProperty {
    Length value;
};

struct ScrollMarginBottomProperty {
    Length value;
};

struct ScrollMarginInlineEndProperty {
    Length value;
};

struct ScrollMarginInlineStartProperty {
    Length value;
};

struct ScrollMarginLeftProperty {
    Length value;
};

struct ScrollMarginRightProperty {
    Length value;
};

struct ScrollMarginTopProperty {
    Length value;
};

struct ScrollPaddingBlockEndProperty {
    struct Auto { };
    std::variant<Auto, LengthPercentage> value;
};

struct ScrollPaddingBlockStartProperty {
    struct Auto { };
    std::variant<Auto, LengthPercentage> value;
};

struct ScrollPaddingBottomProperty {
    struct Auto { };
    std::variant<Auto, LengthPercentage> value;
};

struct ScrollPaddingInlineEndProperty {
    struct Auto { };
    std::variant<Auto, LengthPercentage> value;
};

struct ScrollPaddingInlineStartProperty {
    struct Auto { };
    std::variant<Auto, LengthPercentage> value;
};

struct ScrollPaddingLeftProperty {
    struct Auto { };
    std::variant<Auto, LengthPercentage> value;
};

struct ScrollPaddingRightProperty {
    struct Auto { };
    std::variant<Auto, LengthPercentage> value;
};

struct ScrollPaddingTopProperty {
    struct Auto { };
    std::variant<Auto, LengthPercentage> value;
};

struct TextCombineUprightProperty {
    struct None { };
    struct All { };
    std::variant<None, All> value;
};

struct WidthProperty {
    std::variant<WidthOrHeightUnitlessAllowed> value;
};

struct WebkitBackgroundClipProperty {
    Vector<SingleWebkitBackgroundClip> value;
};

struct WebkitBackgroundOriginProperty {
    Vector<SingleWebkitBackgroundOrigin> value;
};

struct WebkitMaskClipProperty {
    Vector<SingleWebkitMaskClip> value;
};

struct WebkitMaskCompositeProperty {
    Vector<SingleWebkitMaskComposite> value;
};

struct WebkitMaskSourceTypeProperty {
    Vector<SingleWebkitMaskSourceType> value;
};

struct WebkitTextCombineProperty {
    struct None { };
    struct Horizontal { };
    std::variant<None, Horizontal> value;
};

struct WebkitTextOrientationProperty {
    struct Sideways { };
    struct SidewaysRight { };
    struct Mixed { };
    struct Upright { };
    std::variant<Sideways, SidewaysRight, Mixed, Upright> value;
};


} // namespace WebCore

